# feather-rs Setting Up Jersey and Spring 3.0 with feather-rs #

This feather-rs tutorial is using the following implementations:

	* Jersey for JAX-RS/JSR 311
	* Spring3 for @Inject/JSR 330
	* Hibernate Validator for javax.validation/JSR-303
	* log-simple for feather-rs logging.
	* Jetty for the servlet container.

Since we are using spring, we need to make a decision now: Which package do we put our spring components in?

	Well for this tutorial we can put them in 'feather.rs.tutorial1' . Remember this for later.

There are also other decisions to make?
	* Servlet 3 or 2.X? 
	* Spring XML config or JavaConfig? 

We will go with Servlet 2.X, since that will allow us to run in the majority of the servlet containers.

We will also go with Spring XML config instead of JavaConfig, just for simplicity.

## Maven Dependencies ##

To setup, we first need maven dependencies for the following
projects in our WAR project:

	* jersey-server
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>1.8</version>
		</dependency>
	* jersey-spring
		We have to filter out the spring 2.5 dependencies, since spring 2.5 is not an @Inject implementation:

		<dependency>
			<groupId>com.sun.jersey.contribs</groupId>
			<artifactId>jersey-spring</artifactId>
			<version>1.8</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

	* spring 3 (with context and web support):
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>3.0.5.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>3.0.5.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>3.0.5.RELEASE</version>
		</dependency>

	* hibernate-validator 4
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.2.0.Final</version>
		</dependency>

## XML configuration ##

Both the servlet system and spring require some XML.

### src/main/webapp/WEB-INF/web.xml ###
...
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<servlet>
		<servlet-name>Jersey Web Application</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>Jersey Web Application</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>
...

### src/main/resources/applicationContext.xml ###

    <!-- include our code -->
    <context:component-scan base-package="feather.rs.tutorial1"/>

    <!-- include the core library support -->
    <context:component-scan base-package="feather.rs.core"/>

Remember the package name from above? We place that inside of our spring configuration. 
We also put the core feather-rs packagee in the spring configuration. This will bootstrap
the main system inside a DI container. 

Now that this is done, we have a JAX-RS application sitting on / with HTML templating. We can start adding our JAX-RS classes under feather.rs.tutorial1.  We are done with the platform specific parts, for now! 
